@app.route("/improve", methods=("GET", "POST"))
def improve():
    if request.method == "POST":
        result = request.get_data().decode("utf-8")
        # change to json
        result = json.loads(result)
        new_requirement = result["new_requirement"]
        previous_result = result["previous_result"]

        response = openai.Completion.create(
            model="text-davinci-003",
            prompt=generate_promt_update(new_requirement, previous_result),
            temperature=0.6,
            max_tokens=2000,  # Adjust the value as per your requirement
            # n = 1, # Number of completions to generate
            # stop = '\n' # Stop generating completions after the first line break
        )
        print(response.choices[0].text)
        response_json = json.loads(response.choices[0].text)
        color_result = response_json["result"]
        # change to string
        color_result = json.dumps(color_result)
        with open("../unity/color_result.txt", "w") as f:
            f.write(color_result)
        return response.choices[0].text
    result = request.args.get("result")
    return result


@app.route("/asign_color", methods=("GET", "POST"))
def asign_color():
    if request.method == "POST":
        result = request.get_data().decode("utf-8")
        # change to json
        print("【Result】" + result)
        result = json.loads(result)
        context = result["context"]
        color = result["color"]

        response = openai.Completion.create(
            model="text-davinci-003",
            prompt=generate_promt_assign_color(color, context),
            temperature=0.6,
            max_tokens=2000,  # Adjust the value as per your requirement
            # n = 1, # Number of completions to generate
            # stop = '\n' # Stop generating completions after the first line break
        )
        print(response.choices[0].text)
        # change to dict
        response_json = json.loads(response.choices[0].text)
        color_result = response_json["result"]
        # change to string
        color_result = json.dumps(color_result)
        with open("../unity/color_result.txt", "w") as f:
            f.write(color_result)

        return response.choices[0].text
    result = request.args.get("result")
    return result


@ app.route("/get_color_palette", methods=("GET", "POST"))
def generate_design_concept():
    if request.method == "POST":
        description = request.get_data().decode("utf-8")
        response = openai.Completion.create(
            model="text-davinci-003",
            prompt=generate_prompt_color(description, False),
            temperature=0.6,
            max_tokens=2000,  # Adjust the value as per your requirement
            # n = 1, # Number of completions to generate
            # stop = '\n' # Stop generating completions after the first line break
        )
        return response.choices[0].text
    result = request.args.get("result")
    return result


@ app.route("/word_color_mapper", methods=("GET", "POST"))
def word_color_mapper():
    if request.method == "POST":

        # prompt = f"I want a {description} interior design.\nOutput:"
        # description = request.form["description"]
        description = request.get_data().decode("utf-8")
        response = openai.Completion.create(
            model="text-davinci-003",
            prompt=generate_prompt_color(description),
            temperature=0.6,
            max_tokens=50,  # Adjust the value as per your requirement
            # n = 1, # Number of completions to generate
            # stop = '\n' # Stop generating completions after the first line break
        )
        return response.choices[0].text
    result = request.args.get("result")
    # print(result)
    # return render_template("index.html", result=result)
    return result


def generate_prompt_color(description, isfull):
    few_shot_short = """[{"name": "SunsetGlow", "colors": ["deeporanges", "duskypinks", "richpurples"], "hexs":["#FF6347", "#FFC0CB", "#800080"]},
                      {"name": "AutumnHarvest", "colors": ["burntorange", "deepred", "mustardyellow", "earthybrown"], "hexs":["#FF4500", "#8B0000", "#FFD700", "#5C3317"]}, {"name": "RusticRetreat", "colors": ["warmbrowns", "darkgreens", "stonegrays"], "hexs":["#964B00", "#006400", "#708090"]}]"""
    few_shot_full = """[{"name": "SunsetGlow", "colors": ["deeporanges", "duskypinks", "richpurples"], "hexs":["#FF6347", "#FFC0CB", "#800080"]}, {"name": "AutumnHarvest", "colors": ["burntorange", "deepred", "mustardyellow", "earthybrown"], "hexs":["#FF4500", "#8B0000", "#FFD700", "#5C3317"]}, {"name": "RusticRetreat", "colors": ["warmbrowns", "darkgreens", "stonegrays"], "hexs":["#964B00", "#006400", "#708090"]}, {"name": "MediterraneanVilla", "colors": ["terracottaoranges", "sandybeiges", "olivegreens"], "hexs":["#E2725B", "#F5F5DC", "#808000"]}, {"name": "GoldenHour", "colors": ["softgolds", "warmcreams", "rosypink", "lavender"], "hexs":["#FFD700", "#FFFDD0", "#FFC0CB", "#E6E6FA"]}, {"name": "TuscanKitchen", "colors": ["deepreds", "earthybrowns", "softyellows", "darkgreens"], "hexs":["#8B0000", "#5C3317", "#FFFFE0", "#006400"]}, {"name": "CandlelitRoom", "colors": ["warmwhites", "creams", "softbrowns"], "hexs":["#FDF5E6", "#FFFDD0", "#964B00"]}]"""

    # change to string
    if(isfull):
        few_shot = few_shot_full
    else:
        few_shot = few_shot_short
    return """Pretend you're an interior designer. Now I wish to design the color of a room in the interior. Give me 10 brainstormed design concept related so I can choose the colors based on them.
    Input: warm,cozy
    Output:{}
    Input:{}
    Output:""".format(few_shot, description)


def generate_promt_assign_color(colors, context):
    interior_objects_with_layout = "There is a window on the left-hand side, and under the window are cabinets. A table, a computer chair, and a computer display are in the front. On top of the table is a blackboard on the wall. On the right side of the table is the room door."
    interior_objects_without_layout = "Wall, Desk, Ground, Cabinets, ComputerChair, Blackboard, Door, ComputerDisplay, Table, WindowFrame"
    sample_color = """[{"name":"SunsetGlow","colors":["deeporanges","duskypinks","richpurples"],"hexs":["#FF6347","#FFC0CB","#800080"]},{"name":"AutumnHarvest","colors":["burntorange","deepred","mustardyellow","earthybrown"],"hexs":["#FF4500","#8B0000","#FFD700","#5C3317"]},{"name":"RusticRetreat","colors":["warmbrowns","darkgreens","stonegrays"],"hexs":["#964B00","#006400","#708090"]},{"name":"MediterraneanVilla","colors":["terracottaoranges","sandybeiges","olivegreens"],"hexs":["#E2725B","#F5F5DC","#808000"]},{"name":"GoldenHour","colors":["softgolds","warmcreams","rosypink","lavender"],"hexs":["#FFD700","#FFFDD0","#FFC0CB","#E6E6FA"]},{"name":"TuscanKitchen","colors":["deepreds","earthybrowns","softyellows","darkgreens"],"hexs":["#8B0000","#5C3317","#FFFFE0","#006400"]},{"name":"CandlelitRoom","colors":["warmwhites","creams","softbrowns"],"hexs":["#FDF5E6","#FFFDD0","#964B00"]},{"name":"SpicedLatte","colors":["creamybrowns","richcaramel","warmcinnamon"],"hexs":["#CDB79E","#FFD700","#D2691E"]},{"name":"WoodlandGetaway","colors":["warmbrowns","forestgreens","softblue"],"hexs":["#964B00","#228B22","#87CEFA"]},{"name":"CozyLibrary","colors":["deepmahogany","richburgundy","darkgreen","goldaccents"],"hexs":["#C04000","#800020","#006400","#D4AF37"]}]"""
    sample_answer = """{"result":[{"objectName": "Wall", "color": "#708090"}, {"objectName": "Desk", "color": "#964B00"}, {"objectName": "Ground", "color": "#964B00"}, {"objectName": "Cabinets", "color": "#964B00"}, {"objectName": "ComputerChair", "color": "#006400"}, {"objectName": "Blackboard", "color": "#000000"}, {"objectName": "Door", "color": "#964B00"},{"objectName": "ComputerDisplay", "color": "#000000"},{"objectName": "Table", "color": "#964B00"},{"objectName": "WindowFrame", "color": "#964B00"}],"reason":"This design decision is based on the warm and cozy style you prefer. The wall and ground are painted in stone gray (#708090), which gives a quiet and calm feeling. The wood elements in the room including the desk, ground, cabinets, door, table, and window frame are colored with warm brown (#964B00), imitating the color of natural wood, enhancing the sense of warmth. The computer chair is in dark green (#006400), adding a touch of nature and comfort to the space. The blackboard and computer display are in black (#000000), providing a strong contrast"}"""
    return """Please think as an interior designer. Now I wish to design the color of a room in the interior. For each object, choose the final color design using the given colors and give me the reason.
    Input: {}, {}
    Output:{}
    Input:{}, {}
    Output:""".format(interior_objects_without_layout, sample_color,  sample_answer, context, colors)


def generate_promt_update(new_requirement, previous_result):
    sample_new_requirement = """be more serious"""
    sample_pre = """{"result":[{"objectName":"Wall","color":"#FF6347"},{"objectName":"Desk","color":"#964B00"},{"objectName":"Ground","color":"#964B00"},{"objectName":"Sofa","color":"#CDB79E"}],"reason":"This design decision is based on the warm and cozy style you prefer. The wall is painted in a deep orange (#FF6347), which gives a cheerful and inviting feeling. The wood elements in the room including the desk and ground are colored with warm brown (#964B00), imitating the color of natural wood, enhancing the sense of warmth. The sofa is in creamy brown (#CDB79E), adding a touch of comfort to the space."}"""
    sample_answer = """{"result": [{"objectName":"Wall","color":"#191970"},{"objectName":"CoffeeTable","color":"#964B00"},{"objectName":"Ground","color":"#EEDFCC"},{"objectName":"Sofa","color":"#EEDFCC"},{"objectName":"TVStand","color":"#8B4513"},{"objectName":"Armchair","color":"#006400"},{"objectName":"Bookshelf","color":"#006400"}], "reason": "This design decision is based on the Gothic Glamour style. The wall is painted a midnight color (#191970) to create a mysterious and elegant atmosphere. The coffee table, TV stand, and bookshelf are colored with warm brown (#964B00), creating a contrast and making the space look more dynamic. The ground and sofa are colored with light brown (#EEDFCC), adding a touch of warmth and comfort. The armchair is in dark green (#006400), which adds a natural feeling to the room."}"""

    return """Please think as an interior designer. Now I wish to update the color of a room in the interior. For each object, choose the final color design using the given colors and give me the reason following the original format.
    Input: The previous design is {}. I want to change the interior design {}.
    Output:{}
    Input: The previous design is {}. I want to change the interior design {}.
    Output:""".format(sample_pre, sample_new_requirement, sample_answer,  previous_result, new_requirement)


def generate_promt_color_palettes(all_color_generated):

    return """Please think as an interior designer. Now I wish to design color palettes used for the interior using the existing colors. For each object, choose the final color design using the given colors and give me the reason following the original format."""
